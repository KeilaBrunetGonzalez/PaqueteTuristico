// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PaqueteTuristico.Data;

#nullable disable

namespace PaqueteTuristico.Migrations
{
    [DbContext(typeof(conocubaContext))]
    [Migration("20231109225436_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PaqueteTuristico.Models.EContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ConcilTime")
                        .HasColumnType("date");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("date");

                    b.Property<DateTime>("StarDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("EContract");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("PaqueteTuristico.Models.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("Chain")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("ComercializationMode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<int>("DisAirport")
                        .HasColumnType("integer");

                    b.Property<int>("DisNearCity")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<int>("NumberOfFloors")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("integer");

                    b.Property<int>("Phone")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("Hotel");
                });

            modelBuilder.Entity("PaqueteTuristico.Models.HotelPlan", b =>
                {
                    b.Property<int>("HotelId")
                        .HasColumnType("integer");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer");

                    b.HasKey("HotelId", "SeasonId");

                    b.ToTable("Hotel_Plan");
                });

            modelBuilder.Entity("PaqueteTuristico.Models.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<int>("HotelId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("Meal");
                });

            modelBuilder.Entity("PaqueteTuristico.Models.Modality", b =>
                {
                    b.Property<int>("modality_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("modality_id"));

                    b.HasKey("modality_id");

                    b.ToTable("Modality");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("PaqueteTuristico.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<int>("HotelId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("PaqueteTuristico.Models.Season", b =>
                {
                    b.Property<int>("SeasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeasonId"));

                    b.Property<string>("SeasonName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("SeasonId");

                    b.ToTable("Season");
                });

            modelBuilder.Entity("PaqueteTuristico.Models.ComplementaryContract", b =>
                {
                    b.HasBaseType("PaqueteTuristico.Models.EContract");

                    b.Property<string>("ComplementaryServiceProvince")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<decimal>("CostPerPerson")
                        .HasColumnType("money");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.ToTable("ComplementaryContract");
                });

            modelBuilder.Entity("PaqueteTuristico.Models.HotelContract", b =>
                {
                    b.HasBaseType("PaqueteTuristico.Models.EContract");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<decimal>("HotelTotalPrice")
                        .HasColumnType("money");

                    b.ToTable("HotelContract");
                });

            modelBuilder.Entity("PaqueteTuristico.Models.TransportationContract", b =>
                {
                    b.HasBaseType("PaqueteTuristico.Models.EContract");

                    b.Property<int>("IncluedVehicles")
                        .HasColumnType("integer");

                    b.Property<string>("LicensePlateNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("TransportationProvider")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.ToTable("TransportationContract");
                });

            modelBuilder.Entity("PaqueteTuristico.Models.CostPerHour", b =>
                {
                    b.HasBaseType("PaqueteTuristico.Models.Modality");

                    b.Property<float>("cost_per_hour")
                        .HasColumnType("real");

                    b.Property<float>("cost_per_kilometer_traveled")
                        .HasColumnType("real");

                    b.Property<float>("extra_hour_cost")
                        .HasColumnType("real");

                    b.Property<float>("extra_kilometer_cost")
                        .HasColumnType("real");

                    b.ToTable("CostPerHour");
                });

            modelBuilder.Entity("PaqueteTuristico.Models.CostPerTour", b =>
                {
                    b.HasBaseType("PaqueteTuristico.Models.Modality");

                    b.Property<float>("round_trip_cost")
                        .HasColumnType("real");

                    b.Property<string>("rout_description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<float>("route_cost")
                        .HasColumnType("real");

                    b.ToTable("CostPerTour");
                });

            modelBuilder.Entity("PaqueteTuristico.Models.MileageCost", b =>
                {
                    b.HasBaseType("PaqueteTuristico.Models.Modality");

                    b.Property<float>("cost_per_kilometer")
                        .HasColumnType("real");

                    b.Property<float>("cost_per_round_trip")
                        .HasColumnType("real");

                    b.Property<float>("cost_per_waiting_hour")
                        .HasColumnType("real");

                    b.ToTable("MileageCost");
                });

            modelBuilder.Entity("PaqueteTuristico.Models.HotelPlan", b =>
                {
                    b.HasOne("PaqueteTuristico.Models.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PaqueteTuristico.Models.Season", "Seasons")
                        .WithMany("HotelPlans")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("PaqueteTuristico.Models.Meal", b =>
                {
                    b.HasOne("PaqueteTuristico.Models.Hotel", null)
                        .WithMany("Meals")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PaqueteTuristico.Models.Room", b =>
                {
                    b.HasOne("PaqueteTuristico.Models.Hotel", null)
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PaqueteTuristico.Models.ComplementaryContract", b =>
                {
                    b.HasOne("PaqueteTuristico.Models.EContract", null)
                        .WithOne()
                        .HasForeignKey("PaqueteTuristico.Models.ComplementaryContract", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PaqueteTuristico.Models.HotelContract", b =>
                {
                    b.HasOne("PaqueteTuristico.Models.EContract", null)
                        .WithOne()
                        .HasForeignKey("PaqueteTuristico.Models.HotelContract", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PaqueteTuristico.Models.TransportationContract", b =>
                {
                    b.HasOne("PaqueteTuristico.Models.EContract", null)
                        .WithOne()
                        .HasForeignKey("PaqueteTuristico.Models.TransportationContract", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PaqueteTuristico.Models.CostPerHour", b =>
                {
                    b.HasOne("PaqueteTuristico.Models.Modality", null)
                        .WithOne()
                        .HasForeignKey("PaqueteTuristico.Models.CostPerHour", "modality_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PaqueteTuristico.Models.CostPerTour", b =>
                {
                    b.HasOne("PaqueteTuristico.Models.Modality", null)
                        .WithOne()
                        .HasForeignKey("PaqueteTuristico.Models.CostPerTour", "modality_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PaqueteTuristico.Models.MileageCost", b =>
                {
                    b.HasOne("PaqueteTuristico.Models.Modality", null)
                        .WithOne()
                        .HasForeignKey("PaqueteTuristico.Models.MileageCost", "modality_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PaqueteTuristico.Models.Hotel", b =>
                {
                    b.Navigation("Meals");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("PaqueteTuristico.Models.Season", b =>
                {
                    b.Navigation("HotelPlans");
                });
#pragma warning restore 612, 618
        }
    }
}
